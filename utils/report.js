// utils/report.js
const fs = require('fs');
const path = require('path');
const ExcelJS = require('exceljs');

// Th∆∞ m·ª•c l∆∞u b√°o c√°o
const REPORTS_DIR = path.join(__dirname, '../reports');

/**
 * T·∫°o b√°o c√°o t·ªïng h·ª£p
 * @param {Array} results - K·∫øt qu·∫£ x·ª≠ l√Ω c√°c t√†i kho·∫£n
 */
async function generateReport(results) {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c b√°o c√°o t·ªìn t·∫°i
    if (!fs.existsSync(REPORTS_DIR)) {
        fs.mkdirSync(REPORTS_DIR, { recursive: true });
    }

    // T·∫°o b√°o c√°o text
    const textReport = path.join(REPORTS_DIR, `report_${getFormattedDate()}.txt`);
    let textContent = '===== B√ÅO C√ÅO T·ªîNG H·ª¢P =====\n\n';

    // Th·ªëng k√™
    const total = results.length;
    const successful = results.filter(r => r.result.success).length;
    const failed = total - successful;
    const withEnvelopes = results.filter(r => r.result.hasCollectedEnvelope).length;

    textContent += `T·ªïng s·ªë t√†i kho·∫£n: ${total}\n`;
    textContent += `Th√†nh c√¥ng: ${successful}\n`;
    textContent += `Th·∫•t b·∫°i: ${failed}\n`;
    textContent += `C√≥ l√¨ x√¨: ${withEnvelopes}\n\n`;

    // Chi ti·∫øt t·ª´ng t√†i kho·∫£n
    textContent += 'CHI TI·∫æT:\n';
    results.forEach((item, index) => {
        const { account, result } = item;
        textContent += `${index + 1}. ${account.username}|${account.password}: `;

        if (result.success) {
            textContent += `‚úÖ Th√†nh c√¥ng | S·ªë d∆∞: ${result.balance || 'N/A'}`;
            if (result.hasCollectedEnvelope) {
                textContent += ' | üßß C√≥ l√¨ x√¨';
            }
        } else {
            textContent += `‚ùå Th·∫•t b·∫°i | L·ªói: ${result.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`;
        }

        textContent += '\n';
    });

    fs.writeFileSync(textReport, textContent);
    console.log(`‚úÖ ƒê√£ t·∫°o b√°o c√°o text: ${textReport}`);

    // T·∫°o b√°o c√°o Excel
    try {
        const excelReport = path.join(REPORTS_DIR, `report_${getFormattedDate()}.xlsx`);
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('B√°o c√°o');

        // Ti√™u ƒë·ªÅ
        worksheet.columns = [
            { header: 'STT', key: 'stt', width: 5 },
            { header: 'T√†i kho·∫£n', key: 'username', width: 15 },
            { header: 'M·∫≠t kh·∫©u', key: 'password', width: 15 },
            { header: 'Tr·∫°ng th√°i', key: 'status', width: 10 },
            { header: 'S·ªë d∆∞', key: 'balance', width: 10 },
            { header: 'L√¨ x√¨', key: 'envelope', width: 10 },
            { header: 'L·ªói', key: 'error', width: 30 }
        ];

        // D·ªØ li·ªáu
        results.forEach((item, index) => {
            const { account, result } = item;
            worksheet.addRow({
                stt: index + 1,
                username: account.username,
                password: account.password,
                status: result.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i',
                balance: result.balance || '',
                envelope: result.hasCollectedEnvelope ? 'C√≥' : 'Kh√¥ng',
                error: result.message || ''
            });
        });

        // ƒê·ªãnh d·∫°ng
        worksheet.getRow(1).font = { bold: true };

        await workbook.xlsx.writeFile(excelReport);
        console.log(`‚úÖ ƒê√£ t·∫°o b√°o c√°o Excel: ${excelReport}`);
    } catch (error) {
        console.log(`‚ùå L·ªói t·∫°o b√°o c√°o Excel: ${error.message}`);
    }
}

/**
 * L·∫•y ng√†y gi·ªù hi·ªán t·∫°i ƒë·ªãnh d·∫°ng YYYYMMDD_HHMMSS
 * @returns {string} - Chu·ªói ng√†y gi·ªù
 */
function getFormattedDate() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hour = String(now.getHours()).padStart(2, '0');
    const minute = String(now.getMinutes()).padStart(2, '0');
    const second = String(now.getSeconds()).padStart(2, '0');

    return `${year}${month}${day}_${hour}${minute}${second}`;
}

module.exports = {
    generateReport
};
